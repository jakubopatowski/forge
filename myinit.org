

  Author: Jakub Opatowski
  mailto: [[jakub.opatowski@gmail.com]]

* Readme

  [[https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool][How to add and configure new package]]
  [[https://github.com/jwiegley/use-package][use-package homepage]]

tltr

example:
(use-package smex
  :ensure t
  :bind (("M-x" . smex))
  :config (smex-initialize))

The :config keyword executes the code after a package is loaded; 
the :init keyword executes the code before the package is loaded; 
and the :preface keyword is there so the Emacs byte compiler and the 
lisp evaluator know about things like function and symbol declarations.

* Dashboard

  [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard homepage]]
  [[https://github.com/purcell/page-break-lines][page-break-lines homepage]]

  #+BEGIN_SRC emacs-lisp
    (use-package page-break-lines
      :ensure t
      :config
      (global-page-break-lines-mode))

    (use-package all-the-icons
      :ensure t)

    (use-package dashboard
      :ensure t
      :after (all-the-icons)
      :config
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

      ;; Set the title
      (setq dashboard-banner-logo-title "Hello Jakub!")
      ;; Set the banner
      (setq dashboard-startup-banner 3)
      ;; Value can be
      ;; 'official which displays the official emacs logo
      ;; 'logo which displays an alternative emacs logo
      ;; 1, 2 or 3 which displays one of the text banners
      ;; "path/to/your/image.png" which displays whatever image you would prefer

      ;; Content is not centered by default. To center, set
      (setq dashboard-center-content t)

      ;; To disable shortcut "jump" indicators for each section, set
      (setq dashboard-show-shortcuts nil)

      ;; To customize which widgets are displayed, you can use the following snippet

      (setq dashboard-items '( (recents  . 10)
			       (bookmarks . 5)
			       (projects . 5)
			       (agenda . 5)
			       (registers . 5)))

      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-navigator t)
      (setq dashboard-set-init-info t)

      (dashboard-modify-heading-icons '((recents . "file-text")
					(bookmarks . "book")))

      (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
							 :height 1.1
							 :v-adjust -0.05
							 :face 'font-lock-keyword-face))

      ;; Format: "(icon title help action face prefix suffix)"
      (setq dashboard-navigator-buttons
	    `(;; line1
	      (
	       ;; item 1
	       (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
		"Homepage"
		"Browse github.com"
		(lambda (&rest _) (browse-url "https://github.com")))
	       ;;item 2
	       (,(all-the-icons-octicon "info" :height 1.1 :v-adjust 0.0)
		""
		"?/h"
		(lambda (&rest _) (info-emacs-manual)))
	       ))))

#+END_SRC

* Font

[[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][Manual for setting fira code ligatures]]

#+BEGIN_SRC emacs-lisp
  (defun fira-code-mode--make-alist (list)
    "Generate prettify-symbols alist from LIST."
    (let ((idx -1))
      (mapcar
       (lambda (s)
         (setq idx (1+ idx))
         (let* ((code (+ #Xe100 idx))
                (width (string-width s))
                (prefix ())
                (suffix '(?\s (Br . Br)))
                (n 1))
           (while (< n width)
             (setq prefix (append prefix '(?\s (Br . Bl))))
             (setq n (1+ n)))
           (cons s (append prefix suffix (list (decode-char 'ucs code))))))
       list)))

  (defconst fira-code-mode--ligatures
    '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
      "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
      "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
      "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
      ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
      "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
      "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
      "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
      ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
      "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
      "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
      "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
      "x" ":" "+" "+" "*"))

  (defvar fira-code-mode--old-prettify-alist)

  (defun fira-code-mode--enable ()
    "Enable Fira Code ligatures in current buffer."
    (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
    (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
    (prettify-symbols-mode t))

  (defun fira-code-mode--disable ()
    "Disable Fira Code ligatures in current buffer."
    (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
    (prettify-symbols-mode -1))

  (define-minor-mode fira-code-mode
    "Fira Code ligatures minor mode"
    :lighter " Fira Code"
    (setq-local prettify-symbols-unprettify-at-point 'right-edge)
    (if fira-code-mode
        (fira-code-mode--enable)
      (fira-code-mode--disable)))

  (defun fira-code-mode--setup ()
    "Setup Fira Code Symbols"
    (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

  (provide 'fira-code-mode)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

* Environment variables

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Config edit/reload

#+BEGIN_SRC emacs-lisp
  (defun open-config ()
    (interactive)
    (find-file "~/Projekty/forge/myinit.org"))
  (global-set-key (kbd "C-c e") 'open-config)

  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/Projekty/forge/myinit.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC

* Small tweaks

[[https://github.com/Malabarba/spinner.el][spinner homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package spinner
    :ensure t)

  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (load "spinner")

  (setq ingibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)
  (defalias 'list-buffers 'ibuffer-other-window)
  (setq make-backup-files nil) ;stop creating backup~ files
  (setq auto-save-default nil) ;stop creating #autosave# files
  (setq column-number-mode t)
  ;; C-c C-d will duplicate current line
  (global-set-key "\C-c\C-d" "\C-a\C- \C-n\M-w\C-y")
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
  (setq linum-format "%4d \u2502 ")

  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-expert t)
 #+END_SRC

* Small packages

#+BEGIN_SRC emacs-lisp
  ;; to avoid problem 'Failed to download 'gnu' archive
  (use-package gnu-elpa-keyring-update
    :ensure t)

  (use-package try
    :ensure t)

  (use-package ace-window
    :ensure t
    :config
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

  (use-package move-text
    :ensure t
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down)))

  (use-package spinner
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))

  (use-package treemacs
    :ensure t)

  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))

  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))

  (use-package origami
    :ensure t)
#+END_SRC

* Yasnippet

[[https://github.com/joaotavora/yasnippet][yasnippet homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    ;;(yas-global-mode 1)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after (yasnippet))

  (use-package yasnippet-classic-snippets
    :ensure t
    :after (yasnippet))
#+END_SRC

#+RESULTS:

* Words

#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)

  (use-package smart-hungry-delete
    :ensure t
    :bind (("<backspace>" . smart-hungry-delete-backward-char)
           ("C-d" . smart-hungry-delete-forward-char))
    :defer nil ;; dont defer so we can add our functions to hooks 
    :config (smart-hungry-delete-add-default-hooks))
#+END_SRC

* Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-theme homepage]]
[[https://github.com/seagle0128/doom-modeline][doom-modeline homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; ..:: THEMES ::..
    ;;(load-theme 'doom-nova t)
    ;;(load-theme 'doom-one t)
    ;;(load-theme 'doom-one-light t)
    ;;(load-theme 'doom-vibrant t)
    ;;(load-theme 'doom-city-lights t)
    ;;(load-theme 'doom-dracula t)
    ;;(load-theme 'doom-Iosvkem t)
    ;;(load-theme 'doom-molokai t)
    ;;(load-theme 'doom-nord t)
    ;;(load-theme 'doom-nord-light t)
    ;;(load-theme 'doom-opera t)
    ;;(load-theme 'doom-opera-light t)
    ;;(load-theme 'doom-nova t)
    (load-theme 'doom-peacock t)
    ;;(load-theme 'doom-solarized-light t)
    ;;(load-theme 'doom-sourcerer t)
    ;;(load-theme 'doom-spacegrey t)
    ;;(load-theme 'doom-tomorrow-night t)
    ;;(load-theme 'doom-mono-dark t)
    ;;(load-theme 'doom-mono-light t)
    ;;(load-theme 'doom-tron t)
    ;;===============================
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

  ;;(use-package spaceline
  ;;  :ensure t
  ;;  :config
  ;;  (spaceline-emacs-theme))
  ;;
  ;;(use-package spaceline-all-the-icons
  ;;  :ensure t
  ;;  :after spackeline
  ;;  :config
  ;;  (spaceline-all-the-icons-theme))
  ;;
  
   (use-package doom-modeline
     :ensure t
     :hook (after-init . doom-modeline-mode)
     :config
     (setq doom-modeline-buffer-file-name-style 'relative-to-project)
     (setq doom-modeline-icon t)
     (setq doom-modeline-major-mode-icon t)
     (setq doom-modeline-major-mode-color-icon t)
     (setq doom-modeline-buffer-state-icon t)
     (setq doom-modeline-buffer-modification-icon t)
     (setq doom-modeline-minor-modes nil))
#+END_SRC

* Neotree

[[https://github.com/domtronn/all-the-icons.el][all-the-icons homepage]]
[[https://github.com/jaypei/emacs-neotree][neotree homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package neotree
    :ensure t
    :init
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC

* Org mode setup

[[http://cachestocaches.com/2018/6/org-literate-programming/][LITERATE PROGRAMMING WITH ORG-MODE]]
[[https://github.com/hniksic/emacs-htmlize][htmlize homepage]]

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (shell . t)
     (C . t)
     (js . t)
     (dot . t)
     (org . t)
     (latex . t)))

  ;; Syntax highlight in #+BEGIN_SRS blocks
  (setq org-src-fontify-natively t)

  (use-package htmlize
    :ensure t)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org-beautify-theme
    :ensure t)

  (use-package org-ref
    :ensure t)

  (use-package org-pomodoro
    :ensure t)
#+END_SRC

* Smartparens

[[https://github.com/Fuco1/smartparens][Smartparens homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens 
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    :bind
    (
     ("C-<down>" . sp-down-sexp)
     ("C-<up>" . sp-up-sexp)
     ("M-<down>" . sp-backward-down-sexp)
     ("M-<up>" . sp-backward-up-sexp)
     ("C-M-a" . sp-beginning-of-sexp)
     ("C-M-e" . sp-end-of-sexp)
   
     ("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)
     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)
   
     ("C-M-k" . sp-kill-sexp)
     ("C-k" . sp-kill-hybrid-sexp)
     ("M-k" . sp-backward-kill-sexp)
     ("C-M-w" . sp-copy-sexp)
   
     ("C-M-d" . delete-sexp)
     ("M-[" . sp-backward-unwrap-sexp)
     ("M-]" . sp-unwrap-sexp)
   
     ("C-x C-t" . sp-transpose-hybrid-sexp)
   
     ("C-c ("  . wrap-with-parens)
     ("C-c ["  . wrap-with-brackets)
     ("C-c {"  . wrap-with-braces)
     ("C-c '"  . wrap-with-single-quotes)
     ("C-c \"" . wrap-with-double-quotes)
     ("C-c _"  . wrap-with-underscores)
     ("C-c `"  . wrap-with-back-quotes)
     )
    )
#+END_SRC

* Better search

[[;;http://oremacs.com/swiper/][swiper homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffer t)
    (setq ivy-display-style 'fancy))

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ;;("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffer t)
      (setq ivy-display-style 'fancy)
      ;;(define-key read-expression-map (kbd C-r) 'counsel-expression-history)
      ))

  ;;https://github.com/abo-abo/avy
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

#+END_SRC

* Sql

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t)

  (use-package sql-indent
    :ensure t)

  (defun sql-indent-string ()
    "Indents the string under the cursor as SQL."
    (interactive)
    (save-excursion
      (er/mark-inside-quotes)
      (let* ((text (buffer-substring-no-properties (region-beginning) (region-end)))
             (pos (region-beginning))
             (column (progn (goto-char pos) (current-column)))
             (formatted-text (with-temp-buffer
                               (insert text)
                               (delete-trailing-whitespace)
                               (sql-indent-buffer)
                               (replace-string "\n" (concat "\n" (make-string column (string-to-char " "))) nil (point-min) (point-max))
                               (buffer-string))))
        (delete-region (region-beginning) (region-end))
        (goto-char pos)
        (insert formatted-text))))
#+END_SRC

* Git 
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)))

  (setq magit-status-margin
        '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  (use-package git-timemachine
    :ensure t)

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC
* SVN 
#+begin_src emacs-lisp
  (use-package dsvn
    :ensure t)
#+end_src
* General programming

[[https://www.flycheck.org/en/latest/][flycheck homepage]]
lsp based on [[https://microsoft.github.io/language-server-protocol/][language server protocol]].
[[https://microsoft.github.io/language-server-protocol/specification][Language Server Protocol Specification]]
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode homepage]]
[[https://github.com/emacs-lsp/lsp-ui][lsp-ui homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)

(use-package srefactor
    :ensure t
    :config
    (semantic-mode 1)
    (define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
    (define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point))

  (use-package cmake-mode
    :ensure t)

  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-ide-delay 0)
    (setq company-minimum-prefix-length 2)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :bind
    (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :config
    (require 'lsp-clients)
    (add-hook 'prog-mode-hook 'lsp)
    (setq lsp-prefer-flymake nil)
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    (setq-default flycheck-disabled-checkers '(c/c++-cppcheck c/c++-gcc))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "pyls")
                      :major-modes '(python-mode)
                      :server-id 'pyls)))

  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :ensure t
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :bind
    (:map lsp-ui-mode-map
          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ([remap xref-find-references] . lsp-ui-peek-find-references)
          ("C-c u" . lsp-ui-imenu))
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    (setq lsp-ui-doc-use-webkit t)
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil))
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'python-mode-hook 'flycheck-mode))

  (use-package lsp-treemacs
    :ensure t
    :after (yasnippet))

  (use-package company-lsp
    :ensure t
    :commands company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC

* C++ development

[[https://sarcasm.github.io/notes/dev/compilation-database.html][compilation database manual]]
[[https://github.com/MaskRay/ccls][ccls homepage]]
[[https://clang.llvm.org/docs/ClangFormatStyleOptions.html][Clang style options manual]]

#+BEGIN_SRC emacs-lisp
  ;;use only spaces in indentation
  (progn
    (setq-default indent-tabs-mode nil))

  (setq c-default-style "k&r"
        c-basic-offset 4)

  (use-package qt-pro-mode
    :ensure t
    :mode("\\.pro\\'" "\\.pri\\'"))

  (use-package ccls
    :ensure t
    :after (yasnippet)
    :hook
    ((c-mode c++-mode objc-mode) .
     (lambda () (require 'ccls) (lsp)))
    :config
    (if (eq system-type 'gnu/linux)
        (setq ccls-executable "~/Projekty/ccls/Release/ccls"))
    (if (eq system-type 'windows-nt)
        (setq ccls-executable "c:/Program Files (x86)/ccls/bin/ccls.exe")))

  (use-package clang-format
    :ensure t
    :config
    (global-set-key (kbd "C-c u") 'clang-format-buffer)
    (global-set-key (kbd "C-c i") 'clang-format-region))
#+END_SRC 

* Python development

[[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper homepage]]
[[https://github.com/jorgenschaefer/elpy][elpy homepage]]

#+BEGIN_SRC emacs-lisp  
  (setq python-indent-offset 4)

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-eshell)
    (setq venv-location "~/Projekty/python/environments/"))

  ;; NB: only required if you prefer flake8 instead of the default
  ;; send pyls config via lsp-after-initialize-hook -- harmless for
  ;; other servers due to pyls key, but would prefer only sending this
  ;; when pyls gets initialised (:initialize function in
  ;; lsp-define-stdio-client is invoked too early (before server
  ;; start)) -- cpbotha
  (defun lsp-set-cfg ()
    (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
      ;; TODO: check lsp--cur-workspace here to decide per server / project
      (lsp--set-configuration lsp-cfg)))

  (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg)

  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

* Java development

[[https://github.com/emacs-lsp/lsp-java][lsp-java homepage]]

#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :after lsp
    :config 
    (add-hook 'java-mode-hook 'lsp)
    (require 'lsp-java-boot)
    (add-hook 'lsp-mode-hook #'lsp-lens-mode)
    (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode))

  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t)
    ;; enables mouse hover support
    (dap-tooltip-mode t)
    ;; use tooltips for mouse hover
    ;; if it is not enabled 'dap-mode' will use the minibuffer.
    (tooltip-mode t)
    (require 'dap-python)
    (require 'dap-java)
    (require 'dap-lldb))
#+end_src


