
Author: Jakub Opatowski
mailto: [[jakub.opatowski@gmail.com][jakub.opatowski@gmail.com]]

* Introduction
** How to setup HOME dir for emacs?

Recipie is [[https://www.reddit.com/r/emacs/comments/a6ka23/change_home_folder_location_windows/][here]].
Abstract:
1. Create site-start.el in one of the default Lisp library paths.
I chose emacs\share\emacs\site-lisp\site-start.el. You can use C-h v load-path <RET> to find others.
2. Put this function inside it.
(defun set-home-dir (dir)
  "Set a new HOME directory. This is where Emacs will look for init files and
   where '~' will default to."
  (setenv "HOME" dir)
  (message (format "HOME location is %s" (getenv "HOME"))))

(set-home-dir "C:/Dropbox/Apps/emacs/")

** How to use 'use-package'?

[[https://github.com/jwiegley/use-package][use-package homepage]]
The use-package macro allows you to isolate package configuration in your .emacs
file in a way that is both performance-oriented and, well, tidy. I created it 
because I have over 80 packages that I use in Emacs, and things were getting 
difficult to manage. Yet with this utility my total load time is around 2 seconds, 
with no loss of functionality!

* Basic setup

How to manage [[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][garbage collection]]?

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)
  (setq make-backup-files nil) ;Stop creating backup~ files.
  (setq auto-save-default nil) ;Stop creating #autosave# files.
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
  (setq ibuffer-expert t)

  ;; setup windows keymap
  (setq w32-pass-lwindow-to-system nil)
  (setq w32-lwindow-modifier 'super) ; Left Windows key

  (setq w32-pass-rwindow-to-system nil)
  (setq w32-rwindow-modifier 'super) ; Right Windows key

  ;; garbage collection setup
  (defun my/minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my/minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'my/minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my/minibuffer-exit-hook)

  ;;(setq gc-cons-threshold (* 100 1024 1024)) ;;100mb

  ;;Increase the amount of data which Emacs reads from the process.
  ;;Again the emacs default is too low 4k considering that the some of
  ;;the language server responses are in 800k - 3M range.
  (setq read-process-output-max (* 1024 1024)) ;;1mb
#+END_SRC

* The look
** Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-theme homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; ..:: THEMES ::..
    ;; flagship themes
    ;;(load-theme 'doom-one t)
    ;;(load-theme 'doom-one-light t)
    ;;(load-theme 'doom-vibrant t)
    ;; additional themes
    ;;(load-theme 'doom-acario-dark t)
    ;;(load-theme 'doom-acario-light t)
    ;;(load-theme 'doom-city-lights t)
    ;;(load-theme 'doom-challenger-deep t)
    ;;(load-theme 'doom-dark+ t)
    ;;(load-theme 'doom-dracula t)
    ;;(load-theme 'doom-ephemeral t)
    ;;(load-theme 'doom-fairy-floss t)
    (load-theme 'doom-gruvbox t)
    ;;(load-theme 'doom-horizon t)
    ;;(load-theme 'doom-Iosvkem t)
    ;;(load-theme 'doom-laserwave t)
    ;;(load-theme 'doom-material t)
    ;;(load-theme 'doom-manegarm t)
    ;;(load-theme 'doom-molokai t)
    ;;(load-theme 'doom-monokai-classic t)
    ;;(load-theme 'doom-monokai-pro t)
    ;;(load-theme 'doom-moonlight t)
    ;;(load-theme 'doom-nord t)
    ;;(load-theme 'doom-nord-light t)
    ;;(load-theme 'doom-nova t)
    ;;(load-theme 'doom-oceanic-next t)
    ;;(load-theme 'doom-opera t)
    ;;(load-theme 'doom-opera-light t)
    ;;(load-theme 'doom-outrun-electric t)
    ;;(load-theme 'doom-palenight t)
    ;;load-theme 'doom-peacock t)
    ;;(load-theme 'doom-rouge t)
    ;;(load-theme 'doom-snazzy t)
    ;;(load-theme 'doom-solarized-dark t)
    ;;(load-theme 'doom-solarized-light t)
    ;;(load-theme 'doom-sourcerer t)
    ;;(load-theme 'doom-spacegrey t)
    ;;(load-theme 'doom-tomorrow-day t)
    ;;(load-theme 'doom-tomorrow-night t)
    ;;(load-theme 'doom-wilmersdorf t)
    ;;(load-theme 'doom-tomorrow-night t)
    ;;(load-theme 'doom-mono-dark t)
    ;;(load-theme 'doom-mono-light t)
    ;;(load-theme 'doom-tron t)
    ;;===============================
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC

** Minibuffer

A fancy and fast mode-line inspired by minimalism design.
[[https://github.com/seagle0128/doom-modeline][doom-modeline homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq inhibit-compacting-font-caches t)
    (setq doom-modeline-project-detection 'projectile)
    (setq doom-modeline-buffer-file-name-style 'relative-to-project)
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-minor-modes (featurep 'minions))
    (setq doom-modeline-enable-word-count nil)
    (setq doom-modeline-buffer-encoding t)
    (setq doom-modeline-github t)
    (setq doom-modeline-github-interval (* 30 60))
    (setq doom-modeline-lsp t)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-env-enable-python t))
#+END_SRC

** Icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons homepage]]

#+BEGIN_SRC emacs-lisp  
(use-package all-the-icons
    :ensure t)
#+END_SRC

** Dashboard

An extensible emacs startup screen showing you whatâ€™s most important.
[[https://github.com/emacs-dashboard/emacs-dashboard][dashboard homepage]]
[[https://github.com/purcell/page-break-lines][page-break-lines homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (global-page-break-lines-mode))

  (use-package dashboard
    :ensure t
    :after (all-the-icons)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    ;; Set the title
    (setq dashboard-banner-logo-title "Hello Jakub!")
    ;; Set the banner
    (setq dashboard-startup-banner 'logo)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)

    ;; To disable shortcut "jump" indicators for each section, set
    (setq dashboard-show-shortcuts nil)

    ;; To customize which widgets are displayed, you can use the following snippet
    (setq dashboard-items '( (recents  . 10)
			     (bookmarks . 5)
			     (projects . 5)
			     (agenda . 5)
			     (registers . 5)))
  
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-init-info t)
  
    (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))

    (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
						       :height 1.1
						       :v-adjust -0.05
						       :face 'font-lock-keyword-face))

    ;; Format: "(icon title help action face prefix suffix)"
    (setq dashboard-navigator-buttons
	  `(;; line1
	    (
	     ;; item 1
	     (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	      "Homepage"
	      "Browse github.com"
	      (lambda (&rest _) (browse-url "https://github.com")))
	     ;;item 2
	     (,(all-the-icons-octicon "info" :height 1.1 :v-adjust 0.0)
	      ""
	      "?/h"
	      (lambda (&rest _) (info-emacs-manual)))
	     ))))

#+END_SRC

* Small usefull packages
** lorem-ipsum
Add filler lorem ipsum text to Emacs
C-c l p lorem-ipsum-insert-paragraphs
C-c l s lorem-ipsum-insert-sentences
C-c l l lorem-ipsum-insert-list
[[https://github.com/jschaf/emacs-lorem-ipsum][lorem-ipsum homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t
    :config
    (lorem-ipsum-use-default-bindings))
#+END_SRC

** which-key

which-key is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.
[[https://github.com/justbur/emacs-which-key][which-key homepage]]

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

** move-text

MoveText allows you to move the current line using M-up / M-down (or
any other bindings you choose) if a region is marked, it will move the
region instead. 
[[https://github.com/emacsfodder/move-text][move-text homepage]]

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :bind (("M-p" . move-text-up)
         ("M-n" . move-text-down)))
#+END_SRC

** beacon

Whenever the window scrolls a light will shine on top of your cursor
so you know where it is.
[[https://github.com/Malabarba/beacon][beacon homepage]]

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

** spinner

#+begin_src emacs-lisp
  (use-package spinner
    :ensure t)
#+end_src

** paradox
[[https://github.com/Malabarba/paradox][paradox homepage]]

#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :config
    (paradox-enable)
    (setq paradox-github-token "fcd9e7e75dc8cf55044c79163ab2abe468893332"))
#+end_src

** neotree
[[https://github.com/jaypei/emacs-neotree][neotree homepage
]]
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (global-set-key [f8] 'neotree-toggle))
#+end_src

* Small usefull functions

#+begin_src emacs-lisp
  (defun open-config ()
    (interactive)
    (find-file "~/test.org"))
  (global-set-key (kbd "C-c e") 'open-config)

  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/test.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+end_src

* Org customization
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org-beautify-theme
    :ensure t)

  (use-package org-ref
    :ensure t)
#+end_src
* Search improvements  
** Ivy\counsel\swiper
Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Swiper, an Ivy-enhanced alternative to isearch.
[[https://github.com/abo-abo/swiper][ivy\counsel\swiper homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffer t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ;;("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)))
#+END_SRC

** Avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree.
[[https://github.com/abo-abo/avy][avy homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* Editor improvements
** Basic improvements

#+begin_src emacs-lisp
  (setq c-basic-offset 4)
  (setq tab-width 4)
#+end_src

** Google translater

#+begin_src emacs-lisp
  (use-package google-translate
    :ensure t
    :bind
    ("M-o t" . google-translate-at-point)
    ("M-o T" . google-translate-at-point-reverse)
    :custom
    (google-translate-default-source-language "pl")
    (google-translate-default-target-language "en"))
#+end_src

** Template texts by YASnippet

YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.
[[https://github.com/joaotavora/yasnippet][yasnippet homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook
    (prog-mode . yas-minor-mode)
    (org-mode . yas-minor-mode)
    (markdown-mode . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :ensure t
    :after (yasnippet))

  (use-package yasnippet-classic-snippets
    :ensure t
    :after (yasnippet))
#+END_SRC

** Smart hungry delete

Delete whitespace between words, parenthesis and other delimiters in a
smart (dumb) way.
[[https://github.com/hrehfeld/emacs-smart-hungry-delete][smart-hungry-delete homepage]]

#+BEGIN_SRC emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (;;("<backspace>" . smart-hungry-delete-backward-char)
	   ;;smart-hungry-delete-backward-char leads to error in minibuffer
	   ;;Text is read only ??
	   ("C-d" . smart-hungry-delete-forward-char))
    :defer nil ;; dont defer so we can add our functions to hooks 
    :hook
    ((prog-mode . smart-hungry-delete-default-prog-mode-hook)
     (c-mode-common . smart-hungry-delete-default-c-mode-common-hook)
     (python-mode . smart-hungry-delete-default-c-mode-common-hook)
     (text-mode . smart-hungry-delete-default-text-mode-hook)))
#+END_SRC

** Smart parens

Smartparens is a minor mode for dealing with pairs in Emacs.
[[https://github.com/Fuco1/smartparens][Smartparens homepage]]
[[https://matthewbauer.us/bauer/#packages][smartparens configuration]]

#+begin_src emacs-lisp
    (use-package smartparens
      :ensure t
      :preface
      (autoload 'sp-local-pair "smartparens")
      (autoload 'sp-local-tag "smartparens")
      :hook
      (((prog-mode
         web-mode
         html-mode) . smartparens-mode)
       ((prog-mode
         emacs-lisp-mode
         inferior-emacs-lisp-mode
         ielm-mode
         lisp-mode
         inferior-lisp-mode
         lisp-interaction-mode
         eval-expression-minibuffer-setup) . smartparens-strict-mode)
       ((prog-mode
         emacs-lisp-mode
         inferior-emacs-lisp-mode
         ielm-mode
         lisp-mode
         inferior-lisp-mode
         lisp-interaction-mode
         org-mode) . show-smartparens-mode))
      :bind
      (:map smartparens-mode-map
            ("C-M-f" . sp-forward-sexp)
            ("C-M-b" . sp-backward-sexp)
            ("C-M-u" . sp-backward-up-sexp)
            ("C-M-d" . sp-down-sexp)
            ("C-M-p" . sp-backward-down-sexp)
            ("C-M-n" . sp-up-sexp)
            ("M-s" . sp-splice-sexp) 
            ("M-<up>" . sp-splice-sexp-killing-backward)
            ("M-<down>" . sp-splice-sexp-killing-forward)
            ("M-r" . sp-splice-sexp-killing-around)
            ("M-(" . sp-wrap-round)
            ("C-)" . sp-forward-slurp-sexp)
            ("C-<right>" . sp-forward-slurp-sexp)
            ("C-}" . sp-forward-barf-sexp)
            ("C-<left>" . sp-forward-barf-sexp)
            ("C-(" . sp-backward-slurp-sexp)
            ("C-M-<left>" . sp-backward-slurp-sexp)
            ("C-{" . sp-backward-barf-sexp)
            ("C-M-<right>" . sp-backward-barf-sexp)
            ("M-S" . sp-split-sexp)
            ("M-j" . sp-join-sexp))     
      :custom
      (sp-escape-quotes-after-insert nil)
      :config
      (autoload 'sp-with-modes "smartparens" "" nil 'macro)
      (use-package smartparens-config
        :ensure nil
        :demand)

      (sp-with-modes 'org-mode
        (sp-local-pair "*" "*"
                       :actions '(insert wrap)
                       :unless '(sp-point-after-word-p sp-point-at-bol-p)
                       :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
        (sp-local-pair "_" "_" :unless '(sp-point-after-word-p)
                       :wrap "C-_")
        (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                       :post-handlers '(("[d1]" "SPC")))
        (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                       :post-handlers '(("[d1]" "SPC")))
        (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                       :post-handlers '(("[d1]" "SPC")))
        (sp-local-pair "Â«" "Â»"))

      (sp-with-modes '(java-mode c++-mode)
        (sp-local-pair "{" nil
                       :post-handlers '(("||\n[i]" "RET")))
        (sp-local-pair "/*" "*/"
                       :post-handlers '((" | " "SPC")
                                        ("* ||\n[i]" "RET"))))

      (sp-with-modes '(markdown-mode gfm-mode rst-mode)
        (sp-local-pair "*" "*" :bind "C-*")
        (sp-local-tag "2" "**" "**")
        (sp-local-tag "s" "```scheme" "```")
        (sp-local-tag "<"  "<_>" "</_>"
                      :transform 'sp-match-sgml-tags))

      (sp-local-pair 'emacs-lisp-mode "`" nil
                     :when '(sp-in-string-p))
      (sp-local-pair 'clojure-mode "`" "`"
                     :when '(sp-in-string-p))
      (sp-local-pair 'minibuffer-inactive-mode "'" nil
                     :actions nil))
#+end_src

** Complete anything (company)

Company is a text completion framework for Emacs. The name stands for
"complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.
[[https://company-mode.github.io/][company homepage]]

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-ide-delay 0.0) ;;default is 0.2
    (setq company-minimum-prefix-length 1)
    ;;(setq company-clang-executable "/usr/bin/clang")
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+end_src

** Treemacs

Treeemacs [[https://github.com/Alexander-Miller/treemacs][homepage]]

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35
          treemacs-workspace-switch-cleanup      nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
  :after treemacs persp-mode ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

* Programming
** General
*** flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.

[[https://www.flycheck.org/en/latest/][flycheck homepage]]

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

*** flycheck-pkg-config

flycheck-pkg-config provides a convenient way for configuring flycheck
to use C library headers.  It configures flycheck-clang-include-path,
flycheck-gcc-include-path and flycheck-cppcheck-include-path
interactively.

[[https://github.com/Wilfred/flycheck-pkg-config][flycheck-pkg-config homepage]]

#+begin_src emacs-lisp
  (use-package flycheck-pkg-config
    :ensure t)
#+end_src
*** projectile

[[https://github.com/bbatsov/projectile][projectile homepage]]
[[https://gist.github.com/idcrook/28fd6059894cc4f03e74fc48b44da719][projectile integration with neotree]]

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
	  (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
	  (if (neo-global--window-exists-p)
	      (progn
		(neotree-dir project-dir)
		(neotree-find file-name)))
	(message "Could not find git project root!"))))

  (global-set-key (kbd "C-c C-p") 'neotree-project-dir)
#+end_src

** Language server protocol (lsp)

[[https://microsoft.github.io/language-server-protocol/][lsp homepage]]
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode homepage]]
It is nice to run 'M-x lsp-doctor' after lsp setup.

#+begin_src emacs-lisp
	  (setq lsp-keymap-prefix "")

	  (use-package lsp-mode
		:ensure t
		:hook ((lsp-mode . (lambda ()
				 (let ((lsp-keymap-prefix "C-c l"))
				   (lsp-enable-which-key-integration))))
		   (prog-mode . lsp))
		:config
		(setq lsp-print-performance t)
		(setq lsp-completion-provider :capf)
		(setq lsp-headerline-breadcrumb-enable t)
		(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
		:init
		(setq lsp-idle-delay 0.2)
		)

	  (use-package lsp-ui
		:ensure t)

	  (use-package company-lsp
		:ensure t)

	  (use-package lsp-ivy
		:ensure t)

	  (use-package dap-mode
		:ensure t
		:config
		(setq dap-auto-configure-features '(sessions locals controls tooltip))
		(require 'dap-gdb-lldb))
#+end_src

** C++ support

How to setup [[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][C++ programming]] environment.

*** ccls

[[https://github.com/MaskRay/ccls][ccls homepage]]

To allow ccls to know the dependencies of your .cpp files with your .h
files, it is important to provide an compile.commands.json file (or a
.ccls file) at the root of your project.

For this, nothing could be easier. If like me you use a CMakeLists.txt
file for all your C++ projects, then you just need to install the
cmake package on your operating system and to generate the
compile.commands.json file, you have to do:

cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json

#+begin_src emacs-lisp
  (use-package ccls
	:after projectile
	:ensure t
	:custom
	(ccls-args nil)
	(ccls-executable (executable-find "~/tools/ccls.exe"))
	(projectile-project-root-files-top-down-recurring
	 (append '("compile-commands.json" ".ccls")
		 projectile-project-root-files-top-down-recurring))
	:config (push ".ccls-cache" projectile-globally-ignored-directories))
#+end_src

*** clang-format

#+begin_src emacs-lisp
  (use-package clang-format
    :ensure t
    :config
    (global-set-key (kbd "C-c i") 'clang-format-region)
    (global-set-key (kbd "C-c u") 'clang-format-buffer)
    (setq clang-format-style ""))

  (use-package clang-format+
    :ensure t)
#+end_src

** Cmake support

[[https://www.reddit.com/r/emacs/comments/audffp/tip_how_to_use_a_stable_and_fast_environment_to/][Tutorial]] on preparing c++ programming environment.

#+begin_src emacs-lisp
    (use-package cmake-mode
      :ensure t
      :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

    (use-package cmake-font-lock
      :ensure t
      :after (cmake-mode)
      :hook (cmake-mode . cmake-font-lock-activate))

    (use-package cmake-ide
      ;;:after projectile
      :ensure t
      :hook (c++-mode . my/cmake-ide-find-project)
      :preface
      (defun my/cmake-ide-find-project ()
	"Finds the directory of the project for cmake-ide."
	(with-eval-after-load 'projectile
	  (setq cmake-ide-project-dir (projectile-project-root))
	  (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build_emacs")))
	(setq cmake-ide-compile-command
	      (concat "cd "
		      cmake-ide-build-dir
		      " && cmake -GNinja -DCMAKE_RC_COMPILER=clang.exe -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES .."
		      ;;" && cp -u compile_commands.json .."
		      " && copy compile_commands.json .."
		      " && ninja -t compdb > compile_commands2.json"
		      " && ninja all"))
	(cmake-ide-load-db))

      (defun my/switch-to-compilation-window ()
	"Switches to the *compilation* buffer after compilation."
	(other-window 1))
      :bind ([remap comment-region] . cmake-ide-compile)
      :init (cmake-ide-setup)
      :config (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window))
#+end_src

** Git support

[[https://magit.vc/][Magit homepage]]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Python support

jupyter

#+begin_src emacs-lisp 
  (use-package ein
    :ensure t)
#+end_src

** PowerShell
#+begin_src emacs-lisp
  (use-package powershell
    :ensure t)
#+end_src
* End statments

There is no end statment at the moment.
